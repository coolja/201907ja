/*
C国的死对头A国这段时间正在进行军事演习，所以C国间谍头子Derek和他手下Tidy又开始忙乎了。
A国在海岸线沿直线布置了N个工兵营地,Derek和Tidy的任务就是要监视这些工兵营地的活动情况。
由于采取了某种先进的监测手段，所以每个工兵营地的人数C国都掌握的一清二楚
,每个工兵营地的人数都有可能发生变动，可能增加或减少若干人手,但这些都逃不过C国的监视。 
中央情报局要研究敌人究竟演习什么战术,所以Tidy要随时向Derek汇报某一段连续的工兵营地一共有多少人,
例如Derek问:“Tidy,马上汇报第3个营地到第10个营地共有多少人!”Tidy就要马上开始计算这一段的总人数并汇报。
但敌兵营地的人数经常变动，而Derek每次询问的段都不一样，所以Tidy不得不每次都一个一个营地的去数，
很快就精疲力尽了，Derek对Tidy的计算速度越来越不满:"你个死肥仔，算得这么慢，我炒你鱿鱼!”
Tidy想：“你自己来算算看，这可真是一项累人的工作!我恨不得你炒我鱿鱼呢!”无奈之下，Tidy只好打电话向计算机专家Windbreaker求救,
Windbreaker说：“死肥仔，叫你平时做多点acm题和看多点算法书，现在尝到苦果了吧!”Tidy说："我知错了。。。"
但Windbreaker已经挂掉电话了。Tidy很苦恼，这么算他真的会崩溃的，聪明的读者，你能写个程序帮他完成这项工作吗？
不过如果你的程序效率不够高的话，Tidy还是会受到Derek的责骂的. 
Input
第一行一个整数T，表示有T组数据。 
每组数据第一行一个正整数N（N<=50000）,表示敌人有N个工兵营地，接下来有N个正整数,第i个正整数ai代表第i个工兵营地里开始时有ai个人（1<=ai<=50）。 
接下来每行有一条命令，命令有4种形式： 
(1) Add i j,i和j为正整数,表示第i个营地增加j个人（j不超过30） 
(2)Sub i j ,i和j为正整数,表示第i个营地减少j个人（j不超过30）; 
(3)Query i j ,i和j为正整数,i<=j，表示询问第i到第j个营地的总人数; 
(4)End 表示结束，这条命令在每组数据最后出现; 
每组数据最多有40000条命令 
Output
对第i组数据,首先输出“Case i:”和回车, 
对于每个Query询问，输出一个整数并回车,表示询问的段中的总人数,这个数保持在int以内。
*/
#include<iostream>
#include<cstdio>
#include<cstring>
#define lson rt<<1
#define rson rt<<1|1
#define M 50000<<2
using namespace std;
int t,n,o1,o2;					//t: 样例个数 n:每个样例的营地总数
int tree[M];

void build(int l,int r,int rt)  //l:左区间(营地编号) r:右区间 rt:线段树下标 
{
	if(l==r)					//当l=r时，意味着走到了线段树的最底端，即树的叶子结点 
	{
		scanf("%d",&tree[rt]);	//此时输入营地人数 
		return ;
	}
	
	//将[l,r]区间一分为二，分为左孩子和右孩子
	//再分别以左孩子和右孩子作为根节点建树 
	build(l,(l+r)/2,lson);
	build((l+r)/2+1,r,rson); 
	
	//当rt结点的左右孩子都建树完毕，即都有返回值,更新该结点的值 
	tree[rt]=tree[lson]+tree[rson];
}


void update(int a,int d,int l,int r,int rt) //a:需更新的营地编号 d:变更多少 
{
	if(l==r)								//找到需要变更的的数的位置 
	{
		tree[rt]+=d;						//更新数值 
		return ;
	}
	
	//寻找需要变更的那个数 
	if(a<=(l+r)/2)							//判断找的数在根的左边还是右边 
		update(a,d,l,(l+r)/2,lson);
	else
		update(a,d,(l+r)/2+1,r,rson);
		
	//找到需要寻找的那个数并更新后，依次更新其所属根节点 
	tree[rt]=tree[lson]+tree[rson];
}


int add(int L,int R,int l,int r,int rt)//L:区间内求和的左端点 R:区间内求和的右端点
{
	int sum=0; 
	if(l>=L&&r<=R)						//当[l,r]在[L,R]内时 
		return tree[rt];				//返回此时所在的区间的值，即该区间内的和 

	//搜寻符合条件的l和r 
	if(L<=(l+r)/2)
		sum+=add(L,R,l,(l+r)/2,lson);	//搜寻到符合条件的l和r就会返回值	
	 
	if(R>=(l+r)/2+1)
		sum+=add(L,R,(l+r)/2+1,r,rson);	
		
	//直至搜寻完所有符合条件的结点后，返回区间和 
	return sum;
}


int main()
{
	scanf("%d",&t);
	for(int i=1;i<=t;i++)
	{
		char order[6];
		memset(tree,0,sizeof(tree));
		memset(order,0,sizeof(order));
		
		scanf("%d",&n);
		build(1,n,1);
		
		printf("Case %d:\n",i);
		while(1)
		{
			scanf("%s",order);
			if(order[0]=='E')
				break;
			scanf("%d %d",&o1,&o2);
			if(order[0]=='Q')
				printf("%d\n",add(o1,o2,1,n,1));
			else if(order[0]=='A')
				update(o1,o2,1,n,1); 
			else if(order[0]=='S')
				update(o1,-o2,1,n,1); 
		}
		
	} 
}
/*
2
10
1 2 3 4 5 6 7 8 9 10
Query 1 3
Add 3 6
Query 2 7
Sub 10 2
Add 6 3
Query 3 10
End
10
1 2 3 4 5 6 7 8 9 10
Query 1 3
Add 3 6
Query 2 7
Sub 10 2
Add 6 3
Query 3 10
End 
*/
